#Requires -Version 5.1
#Requires -Modules ImportExcel
#Requires -Modules Toolbox.PermissionMatrix, Toolbox.ActiveDirectory

<#
    .SYNOPSIS
        Creates/checks/fixes a folder structure based on permissions defined in 
        an Excel file.

    .DESCRIPTION
        This script launches the script 'Sync permissions' to apply the 
        permission matrix (Check, Fix, New).

    .PARAMETER ImportDir
        The path where the Excel files (matrixes) are located.

    .PARAMETER Archive
        When the 'Archive' switch is used the files will be moved to the folder 
        'Archive' in the source directory.

    .PARAMETER DefaultsFile
        The Excel file that contains the worksheets 'Permissions', which 
        contain the default permissions that need to be applied everywhere, and 
        'MailTo', containing the e-mail addresses of users that need to receive 
        the report on the results.

        This can be an absolute path to the file or a file name with extension 
        that is located within the ImportDir.

    .PARAMETER Regex
        The Regex parameter is used to identify incorrect input in the Excel 
        sheets. We only accept:
        L = List
        R = Read
        W = Write
        F = Full Control
        I = Ignore

    .PARAMETER DetailedLog
        When set to true, the script will be able to log more details for 
        better troubleshooting. In case of ACL's that are incorrect, in normal 
        circumstances only the FullName of the path is reported. When 
        DetailedLog is enabled, the ACL's that are on the folder and the 
        expected ACL are also reported.

        Keep in mind that when enabling DetailedLog, the script execution 
        performance will drop. For this reason it is only advised to use this 
        feature only in case of troubleshooting.

    .PARAMETER CherwellFolder
        The path to the folder where the csv files for Cherwell are saved. These
        files are used by Cherwell to create an interactive form containing the
        SamAccountName and other fields so end users can easily select the 
        AD objects that are generated by a matrix file.

    .PARAMETER CherwellExcelOverviewFileName
        The log name of the Excel file containing the same data as the csv files
        exported to the Cherwell folder.

    .PARAMETER CherwellAdObjectsFileName
        The name of the csv file containing the AD object names generated by
        the combination of GroupName and SiteCode in the settings rows,
        combined with the headers in the permissions worksheet.

    .PARAMETER CherwellFormDataFileName
        The name of the csv file containing the data coming from the worksheet
        FormData within a Matrix Excel file.
 #>

[CmdLetBinding()]
Param (
    [Parameter(Mandatory)]
    [String]$ScriptName = 'Permission matrix (BNL)',
    [Parameter(Mandatory)]
    [String]$ImportDir,
    [String]$DefaultsFile = 'Defaults.xlsx',
    [String]$ScriptSetPermissionFile = 'Set permissions.ps1',
    [String]$ScriptTestRequirements = 'Test requirements.ps1',
    [String[]]$ExcludedSamAccountName = 'belsrvc',
    [Switch]$Archive,
    [Boolean]$DetailedLog = $true,
    [String]$CherwellFolder,
    [String]$CherwellAdObjectsFileName = 'AD object names.csv',
    [String]$CherwellFormDataFileName = 'Form data.csv',
    [String]$CherwellExcelOverviewFileName = 'Overview.xlsx',
    [String]$LogFolder = $env:POWERSHELL_LOG_FOLDER ,
    [String]$ScriptAdmin = $env:POWERSHELL_SCRIPT_ADMIN
)

Begin {
    Function ConvertTo-HtmlValueHC {
        if (-not $E.Value) {
            $null
        }
        elseif (($E.Value.Count -le 5) -and (-not ($E.Value -is [HashTable]))) {
            @"
        <ul>
            $(@($E.Value).ForEach({"<li>$_</li>"}))
        </ul>
"@
        }
        else {
            $fileName = "ID $($S.ID) - $($E.Type) - $($E.Name).txt".Split([IO.Path]::GetInvalidFileNameChars()) -join '_'

            $OutParams = @{
                LiteralPath = Join-Path -Path $I.File.LogFolder -ChildPath $fileName
                Encoding    = 'utf8'
                NoClobber   = $true
            }
            $E | ConvertTo-Json -Depth 100 | ForEach-Object { 
                [System.Text.RegularExpressions.Regex]::Unescape($_) 
            } | Out-File @OutParams
            @"
        <ul>
            <li><a href="$($OutParams.LiteralPath)">$("$($E.Value.Count) items")</a></li>
        </ul>
"@
        }
    }

    Function Get-HTNLidTagProbTypeHC {
        [OutputType([String[]])]
        Param (
            [Parameter(Mandatory)]
            [String]$Name
        )

        try {
            switch ($Name) {
                'FatalError' {
                    'probTypeError'
                    break
                }
                'Warning' {
                    'probTypeWarning'
                    break
                }
                'Information' {
                    'probTypeInfo'
                    break
                }
                Default {
                    throw "Type '$_' is unknown"
                }
            }
        }
        catch {
            throw "Failed converting the HTML name '$Name' to a valid HTML ID tag: $_"
        }
    }

    Function Get-PathItemHC {
        <#
        .SYNOPSIS
            Get the path item form a relative or absolute path
        #>
        Param (
            [Parameter(Mandatory)]
            [string]$Leaf,
            $Parent = $PSScriptRoot
        )
        if (Test-Path -LiteralPath (Join-Path -Path $Parent -ChildPath $Leaf) -PathType Leaf) {
            Get-Item -LiteralPath (Join-Path -Path $Parent -ChildPath $Leaf) -EA Stop
        }
        else {
            Get-Item -LiteralPath $Leaf -EA Stop
        }
    }

    Function Start-TestRequirements {
        Try {
            #region Test PS version, .NET version, set share config, ABE, ...
            $Jobs = foreach (
                $E in  
                ($ExecutableMatrix | 
                    Group-Object -Property { $_.Import.ComputerName })
            ) {
                $InvokeParams = @{
                    FilePath      = $ScriptTestRequirementsItem
                    ArgumentList  = $E.Group.Import.Path, $true
                    ComputerName  = $E.Name
                    JobName       = 'TestRequirements'
                    ThrottleLimit = 10
                    AsJob         = $true
                }
                Invoke-Command @InvokeParams
            }

            if ($Jobs) {
                $null = Wait-Job -Job $Jobs

                foreach ($Job in $Jobs) {
                    $JobError = Get-JobErrorHC -Job $Job

                    #region Retrieve job results and add errors
                    $ExecutableMatrix.Where( 
                        { $_.Import.ComputerName -eq $Job.Location }
                    ).Foreach( 
                        {
                            if ($JobError) {
                                $_.Check += [PSCustomObject]$JobError
                            }
                            $_.Check += Receive-Job -Job $Job -Keep -ErrorAction Ignore
                        }
                    )
                    #endregion
                }

                $Jobs | Remove-Job -Force -EA Ignore
            }
            #endregion
        }
        Catch {
            throw "Failed testing the requirements: $_"
        }
    }

    Function Start-SetPermissionsScriptHC {
        Try {
            #region Set NTFS permissions on folders
            $Queue = $ExecutableMatrix | Select-Object ID, Matrix,
            @{Name = 'Path'; Expression = { $_.Import.Path } },
            @{Name = 'Action'; Expression = { $_.Import.Action } },
            @{Name = 'ComputerName'; Expression = { $_.Import.ComputerName } }

            $JobName = 'SetPermissions_{0}'

            $Jobs = foreach ($q in  $Queue) {
                $InvokeParams = @{
                    FilePath      = $ScriptSetPermissionItem
                    ArgumentList  = $q.Path, $q.Action, $q.Matrix, $DetailedLog
                    ComputerName  = $q.ComputerName
                    JobName       = $JobName -f $q.ID
                    ThrottleLimit = 10
                    AsJob         = $true
                }
                Invoke-Command @InvokeParams
            }

            if ($Jobs) {
                $null = Wait-Job -Job $Jobs

                foreach ($Job in $Jobs) {
                    $JobError = Get-JobErrorHC -Job $Job

                    #region Retrieve job results and add errors based on the job name and the matrix ID
                    $ExecutableMatrix.Where( { 
                            $Job.Name -eq ($JobName -f $_.ID) 
                        }).Foreach( {
                            $_.JobTime = @{
                                Start    = $Job.PSBeginTime
                                End      = $Job.PSEndTime
                                Duration = New-TimeSpan -Start $Job.PSBeginTime -End $Job.PSEndTime
                            }

                            if ($JobError) {
                                $_.Check += [PSCustomObject]$JobError
                            }

                            $_.Check += Receive-Job -Job $Job -Keep -ErrorAction Ignore
                        })
                    #endregion
                }

                $Jobs | Remove-Job -Force -EA Ignore
            }
            #endregion
        }
        Catch {
            throw "Failed starting the set permissions script: $_"
        }
    }

    Try {
        $StartDate = Get-ScriptRuntimeHC -Start
        Import-EventLogParamsHC -Source $ScriptName
        Write-EventLog @EventStartParams

        Get-Job | Remove-Job -Force

        #region Test Cherwell parameters
        if ($CherwellFolder) {
            if (-not 
                (Test-Path -LiteralPath $CherwellFolder -PathType Container)
            ) {
                throw "Cherwell folder '$CherwellFolder' not found"
            }

            @(
                'CherwellAdObjectsFileName',
                'CherwellFormDataFileName',
                'CherwellExcelOverviewFileName'
            ).Where( {
                    -not (Get-Variable -Name $_).Value
                }).foreach( {
                    throw "Parameter '$_' is mandatory when the parameter CherwellFolder is used."
                })
        }
        #endregion

        #region Set permissions file
        Try {
            $ScriptSetPermissionItem = Get-PathItemHC -Leaf $ScriptSetPermissionFile
        }
        Catch {
            throw "Execution script file '$ScriptSetPermissionFile' not found"
        }
        #endregion

        #region Share config file
        Try {
            $ScriptTestRequirementsItem = Get-PathItemHC -Leaf $ScriptTestRequirements
        }
        Catch {
            throw "Share configuration script file '$ScriptTestRequirements' not found"
        }
        #endregion

        #region Create log folder
        $newFolderParams = @{
            Path      = $LogFolder 
            ChildPath = "Permission matrix\$ScriptName"
        }
        $LogFolder = New-FolderHC @newFolderParams
        #endregion

        #region Map share with Excel files
        if (-not (Test-Path -LiteralPath ImportDir:)) {
            $RetryCount = 0; $Completed = $false
            while (-not $Completed) {
                Try {
                    $null = New-PSDrive -Name ImportDir -PSProvider FileSystem -Root $ImportDir -EA Stop
                    $Completed = $true
                }
                Catch {
                    if ($RetryCount -ge '240') {
                        throw "Drive mapping failed for '$ImportDir': $_"
                    }
                    else {
                        Start-Sleep -Seconds 30
                        $RetryCount++
                        $Error.Clear()
                    }
                }
            }
        }

        $ImportDir = Get-Item $ImportDir -EA Stop
        #endregion

        #region Default settings file
        Try {
            #region Get the defaults
            $DefaultsItem = Get-PathItemHC -Leaf $DefaultsFile -Parent $ImportDir

            $DefaultsImport = Import-Excel -Path $DefaultsItem -Sheet Settings -DataOnly
            #endregion

            #region Verify mandatory column headers
            $propDefault = $DefaultsImport.ForEach( { $_.PSObject.Properties.Name })

            @('MailTo', 'ADObjectName', 'Permission').Where( { $propDefault -notContains $_ }).ForEach( {
                    throw "Column header '$_' not found. The column headers 'MailTo', 'ADObjectName' and 'Permission' are mandatory."
                })
            #endregion

            $DefaultAcl = Get-DefaultAclHC -Sheet $DefaultsImport

            #region Get MailTo
            $MailTo = $DefaultsImport.ForEach( {
                    $_.PSObject.Properties.Where( { ($_.Name -eq 'MailTo') -and ($_.Value) }).Foreach( {
                            $_.Value.ToString().Trim()
                        })
                })

            if (-not $MailTo) {
                throw "No mail addresses found under column header 'MailTo'"
            }
            #endregion
        }
        Catch {
            throw "Defaults file '$DefaultsFile' worksheet 'Settings': $_"
        }
        #endregion

        if ($Archive) {
            $ArchiveItem = New-FolderHC -Path $ImportDir -ChildPath Archive
        }
    }
    Catch {
        Write-Warning $_
        Send-MailHC -To $ScriptAdmin -Subject FAILURE -Priority High -Message $_ -Header $ScriptName
        Write-EventLog @EventErrorParams -Message "FAILURE Incorrect input:`n`n- $_"
        Write-EventLog @EventEndParams; Exit 1
    }
}

Process {
    Try {
        $ID = 0

        [Array]$ImportedMatrix = foreach (
            $matrixFile in 
            @(Get-ChildItem -Path ImportDir:\* -Include *.xlsx -File).Where( { $_.FullName -ne $DefaultsItem.FullName })
        ) {
            Try {
                $Obj = [PSCustomObject]@{
                    File        = @{
                        Item         = $matrixFile
                        SaveFullName = $matrixFile.FullName
                        ExcelInfo    = $null
                        LogFolder    = $null
                        Check        = @()
                    }
                    Settings    = @()
                    Permissions = @{
                        Import = @()
                        Check  = @()
                    }
                    FormData    = @{
                        Import = $null
                        Check  = @()
                    }
                }

                #region Create log folder
                $Obj.File.LogFolder = New-FolderHC -Path $LogFolder -ChildPath (
                    '{0:00}-{1:00}-{2:00} {3:00}{4:00} ({5}) - {6}' -f $StartDate.Year, $StartDate.Month,
                    $StartDate.Day, $StartDate.Hour, $StartDate.Minute, $StartDate.DayOfWeek, $matrixFile.BaseName)

                $BeginEvent = "$($matrixFile.Name)`n`nExcel file details:`n"
                #endregion

                #region Copy file to log folder
                $copyParams = @{
                    LiteralPath = $matrixFile.FullName 
                    Destination = $Obj.File.LogFolder 
                    PassThru    = $true
                }
                $Obj.File.SaveFullName = (Copy-Item @copyParams).FullName
                #endregion

                #region Get Excel file details
                $Obj.File.ExcelInfo = Get-ExcelWorkbookInfo -Path $matrixFile

                Write-EventLog @EventVerboseParams -Message ($BeginEvent +
                    "- Name:`t`t`t" + $matrixFile.Name + "`n" +
                    "- DirectoryName:`t`t" + $matrixFile.DirectoryName + "`n" +
                    "- LastModifiedBy:`t`t" + $Obj.File.ExcelInfo.LastModifiedBy + "`n" +
                    "- LastModifiedDate:`t" + $Obj.File.ExcelInfo.Modified.ToString('dd/MM/yyyy HH:mm:ss'))
                #endregion

                #region Import sheets Settings, Permissions, FormData
                Try {
                    $ImportParams = @{
                        Path        = $matrixFile
                        DataOnly    = $true
                        ErrorAction = 'Stop'
                    }
                    #region Import sheet Settings
                    $Settings = @(Import-Excel @ImportParams -Sheet 'Settings').Where( { $_.Status -EQ 'Enabled' })

                    Write-EventLog @EventVerboseParams -Message "$BeginEvent - Worksheet 'Settings' imported with 'Status' set to 'Enabled': $Settings"
                    #endregion

                    if ($Settings) {
                        foreach ($S in $Settings) {
                            $ID++

                            $Obj.Settings += [PSCustomObject]@{
                                ID        = $ID
                                Import    = Format-SettingStringsHC -Settings $S
                                Check     = @()
                                Matrix    = @()
                                AdObjects = @{}
                                JobTime   = @{}
                            }
                        }

                        #region Import sheet Permissions
                        $Obj.Permissions.Import = @(Import-Excel @ImportParams -Sheet 'Permissions' -NoHeader |
                            Format-PermissionsStringsHC)

                        Write-EventLog @EventVerboseParams -Message "$BeginEvent - Worksheet 'Permissions' imported"
                        #endregion

                        #region Import sheet FormData
                        if ($CherwellFolder) {
                            try {
                                $formData = Import-Excel @ImportParams -Sheet 'FormData' -ErrorVariable importFail
                                    
                                Write-EventLog @EventVerboseParams -Message "$BeginEvent - Worksheet 'FormData' imported" 

                                $Obj.FormData.Check += Test-FormDataHC $formData
                                    
                                if (-not $Obj.FormData.Check) {
                                    $Obj.FormData.Import = $formData
                                }
                            }
                            catch {
                                $Obj.File.Check += [PSCustomObject]@{
                                    Type        = 'FatalError'
                                    Name        = "Worksheet 'FormData' not found"
                                    Description = "When the argument 'CherwellFolder' is used the Excel file needs to have a worksheet 'FormData'."
                                    Value       = @($_)
                                }
                                # remove multiple errors from Import-Excel
                                $importFail | ForEach-Object { 
                                    $Error.Remove($_) 
                                }
                            }
                        }
                        #endregion
                    }
                    else {
                        $Obj.File.Check += [PSCustomObject]@{
                            Type        = 'Warning'
                            Name        = 'Matrix disabled'
                            Description = 'Every Excel file needs at least one enabled matrix.'
                            Value       = "The worksheet 'Settings' does not contain a row with 'Status' set to 'Enabled'."
                        }
                        Write-EventLog @EventVerboseParams -Message "$BeginEvent - No lines found with status 'Enabled' in the worksheet 'Settings'"
                    }
                }
                Catch {
                    $errorMessage = Switch -Wildcard ($_) {
                        "*Worksheet 'Settings' not found*" {
                            "Worksheet 'Settings' not found"; Break
                        }
                        "*worksheet 'Settings': No column headers found on top row '1'*" {
                            "Worksheet 'Settings' is empty"; Break
                        }
                        "*Worksheet 'Permissions' not found*" {
                            "Worksheet 'Permissions' not found"; Break
                        }
                        "*worksheet 'Permissions': No column headers found on top row '1'*" {
                            "Worksheet 'Permissions' is empty"; Break
                        }
                        Default {
                            throw "Failed importing the Excel file '$($Obj.File.FullName)': $_"
                        }
                    }
                    $Obj.File.Check += [PSCustomObject]@{
                        Type        = 'FatalError'
                        Name        = 'Excel file incorrect'
                        Description = "The worksheets 'Settings' and 'Permissions' are mandatory."
                        Value       = $errorMessage
                    }

                    Try { $Error.RemoveRange(0, 2) }
                    Catch { throw 'Import-Excel throws 2 errors normally' }
                }
                #endregion

                if ($Archive) {
                    Try {
                        Move-Item -LiteralPath $matrixFile -Destination $ArchiveItem -Force -EA Stop
                        Write-EventLog @EventVerboseParams -Message "$BeginEvent - Moved file to archive folder:`n$($ArchiveItem.FullName)"
                    }
                    Catch {
                        $Obj.File.Check += [PSCustomObject]@{
                            Type        = 'Warning'
                            Name        = 'Archiving failed'
                            Description = "When the '-Archive' switch is used the file is moved to the archive folder.In case a file is still in use, the move operation might fail."
                            Value       = @($_)
                        }

                        $Error.RemoveAt(0)
                    }
                }

                $Obj
            }
            Catch {
                Write-Warning $_
                Send-MailHC -To $ScriptAdmin -Subject 'FAILURE' -Priority 'High' -Message $_ -Header $ScriptName
                Write-EventLog @EventErrorParams -Message "FAILURE:`n`n- $_"
                Write-EventLog @EventEndParams; Exit 1
            }
        }

        if ($ImportedMatrix) {
            #region Build FormData for CherwellFolder
            foreach ($I in ($ImportedMatrix.Where( { $_.FormData.Import }))) {
                try {
                    $property = @{}

                    #region Convert MatrixResponsible to UserPrincipalName
                    $params = @{
                        Name = $I.FormData.Import.MatrixResponsible.Split(',').Trim()
                    }
                    $result = Get-AdUserPrincipalNameHC @params
    
                    $property.MatrixResponsible = $result.userPrincipalName -join ','
    
                    if ($result.notFound) {
                        $I.FormData.Check += [PSCustomObject]@{
                            Type        = 'Warning'
                            Name        = 'AD object not found'
                            Description = "The email address or SamAccountName is not found in the active directory. Multiple entries are supported with the comma ',' separator."
                            Value       = $result.notFound
                        }
                    }
                    #endregion
    
                    #region Add MatrixFilePath and MatrixFileName
                    $property.MatrixFilePath = if ($Archive) {
                        Join-Path $ArchiveItem $I.File.Item.Name
                    }
                    else { 
                        $I.File.Item.FullName 
                    }
    
                    $property.MatrixFileName = $I.File.Item.BaseName
                    #endregion

                    $I.FormData.Import | Add-Member -NotePropertyMembers $property -Force
                }
                catch {
                    $I.FormData.Check += [PSCustomObject]@{
                        Type        = 'FatalError'
                        Name        = 'Failed adding property'
                        Description = "The worksheet 'FormData' could not be updated correctly."
                        Value       = @($_)
                    }
                }
            }
            #endregion

            #region Build the matrix and check for incorrect input
            Write-EventLog @EventVerboseParams -Message 'Build the matrix and check for incorrect input'

            foreach ($I in ($ImportedMatrix.Where( 
                        { 
                            ($_.File.Check.Type -notContains 'FatalError' ) -and
                            ($_.Settings)
                        }))
            ) {
                Try {
                    $I.Permissions.Check += Test-MatrixPermissionsHC -Permissions $I.Permissions.Import

                    if ($I.Permissions.Check.Type -notContains 'FatalError') {
                        foreach ($S in $I.Settings) {
                            $S.Check += Test-MatrixSettingHC -Setting $S.Import

                            #region Create AD object names
                            $params = @{
                                Begin         = $S.Import.GroupName
                                Middle        = $S.Import.SiteCode
                                ColumnHeaders = $I.Permissions.Import | 
                                Select-Object -First 3
                            }
                            $adObjects = ConvertTo-MatrixADNamesHC @params
                            
                            $S.Check += Test-AdObjectsHC $adObjects
                            #endregion

                            #region Create matrix for each settings line
                            if ($S.Check.Type -notContains 'FatalError') {
                                $S.AdObjects = $adObjects

                                $params = @{
                                    NonHeaderRows = $I.Permissions.Import | 
                                    Select-Object -Skip 3
                                    ADObjects     = $adObjects
                                }
                                $S.Matrix += ConvertTo-MatrixAclHC @params
                            }
                            #endregion
                        }
                    }
                }
                Catch {
                    $I.File.Check += [PSCustomObject]@{
                        Type        = 'FatalError'
                        Name        = 'Unknown error'
                        Description = 'While checking the input and generating the matrix an error was reported.'
                        Value       = $_
                    }
                    $Error.RemoveAt(0)
                }
            }
            #endregion

            #region Duplicate ComputerName/Path combination
            Write-EventLog @EventVerboseParams -Message 'Check duplicate ComputerName/Path combination'

            (@($ImportedMatrix.Settings | Group-Object @{Expression = { $_.Import.ComputerName + ' - ' + $_.Import.Path } }
                ).Where( { $_.Count -ge 2 })).Group.Foreach( {
                    $_.Check += [PSCustomObject]@{
                        Type        = 'FatalError'
                        Name        = 'Duplicate ComputerName/Path combination'
                        Description = "Every 'ComputerName' combined with a 'Path' needs to be unique over all the 'Settings' worksheets found in all the active matrix files."
                        Value       = @{$_.Import.ComputerName = $_.Import.Path }
                    }
                })
            #endregion

            #region Check expanded matrix and get AD object details
            Write-EventLog @EventVerboseParams -Message 'Check expanded matrix'
            
            $AdObjects = $ImportedMatrix.Settings.Matrix.ACL.Keys

            if ($AdObjects.count -ne 0) {
                $params = @{
                    SamAccountName   = $AdObjects | Sort-Object -Unique
                    ADObjectProperty = 'ManagedBy'
                }
                $ADObjectDetails = @(Get-ADObjectDetailHC @params)

                @($ImportedMatrix.Settings).Where( { $_.Matrix }).Foreach( {
                        $params = @{
                            Matrix                 = $_.Matrix
                            ADObject               = $ADObjectDetails
                            DefaultAcl             = $DefaultAcl
                            ExcludedSamAccountName = $ExcludedSamAccountName
                        }
                        $_.Check += Test-ExpandedMatrixHC @params
                    })
            }
            #endregion

            #region Get AD object details for group managers
            if (
                $groupManagers = $ADObjectDetails.ADObject.ManagedBy | 
                Sort-Object -Unique
            ) {
                $M = "Retrieve AD object details for $($groupManagers.Count) group managers"
                Write-Verbose $M; Write-EventLog @EventVerboseParams -Message $M
                
                $params = @{
                    DistinguishedName = $groupManagers
                }
                $groupManagersAdDetails = Get-ADObjectDetailHC @params
            }
            #endregion

            #region Remove group members that are in the ExcludedSamAccountName
            if ($ExcludedSamAccountName) {
                foreach ($adObject in $ADObjectDetails) {
                    $adObject.adGroupMember = $adObject.adGroupMember |
                    Where-Object { 
                        $ExcludedSamAccountName -notContains $_.SamAccountName 
                    }
                }
                foreach ($adObject in $groupManagersAdDetails) {
                    $adObject.adGroupMember = $adObject.adGroupMember |
                    Where-Object { 
                        $ExcludedSamAccountName -notContains $_.SamAccountName 
                    }
                }
            }
            #endregion

            #region Test minimal server requirements (PS version, ..)
            Write-EventLog @EventVerboseParams -Message 'Check server requirements'

            if ($ExecutableMatrix = @(Get-ExecutableMatrixHC -From $ImportedMatrix)) {
                Start-TestRequirements
            }
            #endregion

            #region Set permissions
            Write-EventLog @EventVerboseParams -Message 'Set permissions'

            if ($ExecutableMatrix = @(Get-ExecutableMatrixHC -From $ImportedMatrix)) {
                #region Add default permissions
                <#
                    In case of conflict, when the same AD object is used in the matrix ACL and in the default ACL,
                    the AD Object's permissions in the matrix ACL will win.
                #>
                if ($DefaultAcl.Count -ne 0) {
                    foreach ($E in @($ExecutableMatrix.Matrix.ACL).Where( { 
                                $_.Count -ne 0 })
                    ) {
                        $DefaultAcl.GetEnumerator().Where( { 
                                -not $E.ContainsKey($_.Key) }).Foreach( {
                                $E.Add($_.Key, $_.Value)
                            })
                    }
                }
                #endregion

                Start-SetPermissionsScriptHC
            }
            #endregion
        }
    }
    Catch {
        Write-Warning $_
        Get-Job | Remove-Job -Force -EA Ignore
        Get-PSSession | Remove-PSSession

        Send-MailHC -To $ScriptAdmin -Subject FAILURE -Priority High -Message $_ -Header $ScriptName
        Write-EventLog @EventErrorParams -Message "FAILURE:`n`n- $_"
        Write-EventLog @EventEndParams; Exit 1
    }
}

End {
    Try {
        $matrixLogFile = Join-Path -Path $LogFolder -ChildPath (
            '{0:00}-{1:00}-{2:00} {3:00}{4:00} ({5})' -f 
            $StartDate.Year, $StartDate.Month, $StartDate.Day, 
            $StartDate.Hour, $StartDate.Minute, $StartDate.DayOfWeek
        )
            
        if ($ImportedMatrix) {
            #region Export Cherwell FormData and AD Objects
            $formDataSheet = @()
            $adObjectNamesSheet = @()

            if (
                $CherwellFolder -and 
                ($ImportedMatrix.FormData.Check.Type -notContains 'FatalError')
            ) {
                #region Create AD Object names and FormData to export
                foreach ($I in $ImportedMatrix) {
                    $adObjects = foreach (
                        $S in 
                        $I.Settings.Where( { $_.AdObjects.Count -ne 0 })
                    ) {
                        foreach ($A in ($S.AdObjects.GetEnumerator())) {
                            [PSCustomObject]@{
                                MatrixFileName	= $I.File.Item.BaseName
                                SamAccountName = $A.Value.SamAccountName
                                GroupName      = $A.Value.Converted.Begin
                                SiteCode       = $A.Value.Converted.Middle
                                Name           = $A.Value.Converted.End
                            }
                        }
                    }

                    if ($adObjects) {
                        $formDataSheet += $I.FormData.Import

                        $adObjectNamesSheet += $adObjects | 
                        Group-Object SamAccountName | 
                        ForEach-Object { $_.Group[0] }
                    }
                }
                #endregion

                #region Remove old exported files
                $ExportParams = @{
                    Path         = "$matrixLogFile - Cherwell - $CherwellExcelOverviewFileName"
                    AutoSize     = $true
                    FreezeTopRow = $true
                }
                $ExportParams.Path | Remove-Item -EA Ignore

                $exportCsvAdParams = @{
                    literalPath       = Join-Path $CherwellFolder $CherwellAdObjectsFileName
                    Encoding          = 'utf8'
                    NoTypeInformation = $true
                }
                $exportCsvAdParams.literalPath | Remove-Item -EA Ignore

                $exportCsvFormParams = @{
                    literalPath       = Join-Path $CherwellFolder $CherwellFormDataFileName
                    Encoding          = 'utf8'
                    NoTypeInformation = $true
                }
                $exportCsvFormParams.literalPath | Remove-Item -EA Ignore
                #endregion

                if ($AdObjectNamesSheet) {
                    #region Export AD object names to an Excel file
                    Write-EventLog @EventOutParams -Message "Export $($AdObjectNamesSheet.Count) AD object names to '$($ExportParams.Path)'"
    
                    $AdObjectNamesSheet | 
                    Export-Excel @ExportParams -WorksheetName 'AdObjectNames' -TableName 'AdObjectNames'
                    #endregion

                    #region Export AD object names to a csv file
                    Write-EventLog @EventOutParams -Message "Export AD object names to '$($exportCsvAdParams.literalPath)'"

                    $adObjectNamesSheet | Export-Csv @exportCsvAdParams
                    #endregion

                    #region Copy csv file to log folder
                    $copyParams = @{
                        LiteralPath = $exportCsvAdParams.literalPath
                        Destination = "$matrixLogFile - Cherwell - $CherwellAdObjectsFileName"
                    }
                    Copy-Item @copyParams
                    #endregion
                }

                if ($formDataSheet) {
                    #region Export FormData to an Excel file
                    Write-EventLog @EventOutParams -Message "Export FormData to '$($ExportParams.Path)'"
    
                    $formDataSheet | 
                    Export-Excel @ExportParams -WorksheetName 'FormData' -TableName 'FormData'
                    #endregion
    
                    #region Export FormData to a csv file
                    Write-EventLog @EventOutParams -Message "Export FormData to '$($exportCsvFormParams.literalPath)'"
    
                    $formDataSheet | Export-Csv @exportCsvFormParams
                    #endregion

                    #region Copy csv file to log folder
                    $copyParams = @{
                        LiteralPath = $exportCsvFormParams.literalPath
                        Destination = "$matrixLogFile - Cherwell - $CherwellFormDataFileName"
                    }
                    Copy-Item @copyParams
                    #endregion
                }

                if ($adObjectNamesSheet -or $formDataSheet) {
                    #region Copy Excel file from log folder to Cherwell folder
                    $copyParams = @{
                        LiteralPath = $ExportParams.Path
                        Destination = Join-Path $CherwellFolder $CherwellExcelOverviewFileName
                    }
                    Copy-Item @copyParams
                    #endregion
                }
            }
            #endregion

            #region Export to matrix Excel log file
            foreach ($I in $ImportedMatrix) {
                #region Get unique SamAccountNames for all matrix in Settings
                $matrixSamAccountNames = $i.Settings.AdObjects.Values.SamAccountName | 
                Select-Object -Property @{
                    Name       = 'name'; 
                    Expression = { "$($_)".Trim() } 
                } -Unique |
                Select-Object -ExpandProperty name

                $M = "Matrix '$($i.File.Item.Name)' has '$($matrixSamAccountNames.count)' unique SamAccountNames"
                Write-Verbose $M; Write-EventLog @EventVerboseParams -Message $M
                #endregion

                #region Create Excel worksheet 'AccessList'
                $accessListToExport = foreach ($S in $matrixSamAccountNames) {
                    $adData = $ADObjectDetails | 
                    Where-Object { $S -EQ $_.samAccountName }
                   
                    if (-not $adData.adObject) {
                        $M = "Matrix '$($i.File.Item.Name)' SamAccountName '$s' not found in AD"
                        Write-Warning $M; Write-EventLog @EventWarnParams -Message $M
                    }
                    elseif (-not $adData.adGroupMember) {
                        $adData | Select-Object -Property SamAccountName, 
                        @{Name = 'Name'; Expression = { $_.adObject.Name } },
                        @{Name = 'Type'; Expression = { $_.adObject.ObjectClass } },
                        MemberName, MemberSamAccountName
                    }
                    else {
                        $adData.adGroupMember | Select-Object -Property @{
                            Name       = 'SamAccountName'; 
                            Expression = { $S } 
                        },
                        @{Name = 'Name'; Expression = { $adData.adObject.Name } },
                        @{Name = 'Type'; Expression = { $adData.adObject.ObjectClass } },
                        @{Name = 'MemberName'; Expression = { $_.Name } },
                        @{Name = 'MemberSamAccountName'; Expression = { $_.SamAccountName } }
                    }
                }
                #endregion

                #region Create Excel worksheet 'GroupManagers'
                $groupManagersToExport = foreach ($S in $matrixSamAccountNames) {
                    $adData = (
                        $ADObjectDetails | Where-Object { 
                            ($S -EQ $_.samAccountName) -and
                            ($_.adObject.ObjectClass -eq 'group')
                        }
                    )
                    if ($adData) {
                        $groupManager = $groupManagersAdDetails | Where-Object {
                            $_.DistinguishedName -eq $adData.adObject.ManagedBy
                        }
            
                        if (-not $groupManager) {
                            [PSCustomObject]@{
                                GroupName         = $adData.adObject.Name
                                ManagerName       = $null
                                ManagerType       = $null
                                ManagerMemberName = $null
                            }
                        }
                        elseif (-not $groupManager.adGroupMember) {
                            [PSCustomObject]@{
                                GroupName         = $adData.adObject.Name
                                ManagerName       = $groupManager.adObject.Name
                                ManagerType       = $groupManager.adObject.ObjectClass
                                ManagerMemberName = $null
                            }
                        }
                        else {
                            foreach ($user in $groupManager.adGroupMember) {
                                [PSCustomObject]@{
                                    GroupName         = $adData.adObject.Name
                                    ManagerName       = $groupManager.adObject.Name
                                    ManagerType       = $groupManager.adObject.ObjectClass
                                    ManagerMemberName = $user.Name
                                }
                            }
                        }
                    }
                }
                #endregion
               
                if ($accessListToExport) {
                    #region Export to Excel worksheet 'AccessList'
                    $excelParams = @{
                        Path               = $I.File.SaveFullName
                        AutoSize           = $true
                        WorksheetName      = 'AccessList'
                        TableName          = 'AccessList'
                        FreezeTopRow       = $true
                        NoNumberConversion = '*'
                        ClearSheet         = $true
                    }
                               
                    $M = "Export $($accessListToExport.Count) AD objects to Excel file '$($excelParams.Path)' worksheet '$($excelParams.WorksheetName)'"
                    Write-Verbose $M; Write-EventLog @EventOutParams -Message $M
               
                    $accessListToExport | Export-Excel @excelParams
                    #endregion
            
                    #region Export to Excel worksheet 'GroupManagers'
                    if ($groupManagersToExport) {
                        $excelParams.WorksheetName = $excelParams.TableName = 'GroupManagers'
                                
                        $M = "Export $($groupManagersToExport.Count) AD objects to Excel file '$($excelParams.Path)' worksheet '$($excelParams.WorksheetName)'"
                        Write-Verbose $M; Write-EventLog @EventOutParams -Message $M
                                
                        $groupManagersToExport | Export-Excel @excelParams
                    }
                    #endregion
                }
            }
            #endregion
            
            #region HTML <style> for Mail and Settings
            Write-EventLog @EventVerboseParams -Message "Format HTML"

            $htmlStyle = @"
<style>
    a {
        color: black;
        text-decoration: underline;
    }
    a:hover {
        color: blue;
    }

    #overviewTable {
        border-collapse: collapse;
        border: 1px solid Black;
        table-layout: fixed;
    }

    #overviewTable th {
        font-weight: normal;
        text-align: left;
    }
    #overviewTable td {
        text-align: center;
    }

    #matrixTable {
        border: 1px solid Black;
        /* padding-bottom: 60px; */
        /* border-spacing: 0.5em; */
        border-collapse: separate;
        border-spacing: 0px 0.6em;
        /* padding: 10px; */
        width: 600px;
    }

    #matrixTitle {
        border: none;
        background-color: lightgrey;
        text-align: center;
        padding: 6px;
    }

    #matrixHeader {
        font-weight: normal;
        letter-spacing: 5pt;
        font-style: italic;
    }

    #matrixFileInfo {
        font-weight: normal;
        font-size: 12px;
        font-style: italic;
        text-align: center;
    }

    #LegendTable {
        border-collapse: collapse;
        border: 1px solid Black;
        table-layout: fixed;
    }

    #LegendTable td {
        text-align: center;
    }

    #probTitle {
        font-weight: bold;
    }

    #probTypeWarning {
        background-color: orange;
    }
    #probTextWarning {
        color: orange;
        font-weight: bold;
    }

    #probTypeError {
        background-color: red;
    }
    #probTextError {
        color: red;
        font-weight: bold;
    }

    #probTypeInfo {
        background-color: lightgrey;
    }

    table tbody tr td a {
        display: block;
        width: 100%;
        height: 100%;
    }
</style>
"@
            #endregion

            #region HTML LegendTable for Mail and Settings
            $htmlLegend = @"
<table id="LegendTable">
    <tr>
        <td id="probTypeError" style="border: 1px solid Black;width: 150px;">Error</td>
        <td id="probTypeWarning" style="border: 1px solid Black;width: 150px;">Warning</td>
        <td id="probTypeInfo" style="border: 1px solid Black;width: 150px;">Information</td>
    </tr>
</table>
"@
            #endregion

            #region HTML Mail overview & Settings detail
            $htmlMatrixTables = foreach ($I in $ImportedMatrix) {
                #region HTML File
                $FileCheck = if ($I.File.Check) {
                    @"
                    <th id="matrixHeader" colspan="8">File</th>
"@

                    foreach ($F in $I.File.Check) {
                        $ProbType = Get-HTNLidTagProbTypeHC -Name $F.Type

                        $ProbValue = if ($F.Value) {
                            '<ul>'
                            @($F.Value).ForEach( { "<li>$_</li>" })
                            '</ul>'
                        }

                        @"
                        <tr>
                            <td id="$ProbType"></td>
                            <td colspan="7">
                                <p id="probTitle">$($F.Name)</p>
                                <p>$($F.Description)</p>
                                $ProbValue
                            </td>
                        </tr>
"@
                    }
                }
                #endregion

                #region HTML FormData
                $FormDataCheck = if ($I.FormData.Check) {
                    @"
                    <th id="matrixHeader" colspan="8">FormData</th>
"@

                    foreach ($F in $I.FormData.Check) {
                        $ProbType = Get-HTNLidTagProbTypeHC -Name $F.Type

                        $ProbValue = if ($F.Value) {
                            '<ul>'
                            @($F.Value).ForEach( { "<li>$_</li>" })
                            '</ul>'
                        }

                        @"
                        <tr>
                            <td id="$ProbType"></td>
                            <td colspan="7">
                                <p id="probTitle">$($F.Name)</p>
                                <p>$($F.Description)</p>
                                $ProbValue
                            </td>
                        </tr>
"@
                    }
                }
                #endregion

                #region HTML Permissions
                $PermissionsCheck = if ($I.Permissions.Check) {
                    @"
                    <th id="matrixHeader" colspan="8">Permissions</th>
"@

                    foreach ($F in $I.Permissions.Check) {
                        $ProbType = Get-HTNLidTagProbTypeHC -Name $F.Type

                        $ProbValue = if ($F.Value) {
                            '<ul>'
                            @($F.Value).ForEach( {
                                    "<li>$_</li>"
                                })
                            '</ul>'
                        }

                        @"
                        <tr>
                            <td id="$ProbType"></td>
                            <td colspan="7">
                                <p id="probTitle">$($F.Name)</p>
                                <p>$($F.Description)</p>
                                $ProbValue
                            </td>
                        </tr>
"@
                    }
                }
                #endregion

                #region HTML Mail overview Settings table $ Settings detail file
                $MailSettingsTable = $null

                if (
                    ($I.Settings) -and
                    ($I.File.Check.Type -notContains 'FatalError') -and 
                    ($I.Permissions.Check.Type -notContains 'FatalError')
                ) {
                    $HtmlSettingsHeader = @"
                    <th id="matrixHeader" colspan="8">Settings</th>
                    <tr>
                        <td></td>
                        <td>ID</td>
                        <td>ComputerName</td>
                        <td>Path</td>
                        <td>Action</td>
                        <td>Duration</td>
                    </tr>
"@

                    $MailSettingsTable = $HtmlSettingsHeader

                    foreach ($S in $I.Settings) {
                        #region Get problem color
                        $ProbType = if ($S.Check.Type -contains 'FatalError') {
                            Get-HTNLidTagProbTypeHC -Name 'FatalError'
                        }
                        elseif ($S.Check.Type -contains 'Warning') {
                            Get-HTNLidTagProbTypeHC -Name 'Warning'
                        }
                        elseif ($S.Check.Type -contains 'Information') {
                            Get-HTNLidTagProbTypeHC -Name 'Information'
                        }
                        #endregion

                        #region HTML Settings Create tables
                        $SettingsDetailFatalError = foreach ($E in @($S.Check).Where( { $_.Type -eq 'FatalError' })) {
                            $htmlValue = ConvertTo-HtmlValueHC
                            @"
                            <tr>
                                <td id="probTypeError"></td>
                                <td colspan="7">
                                    <p id="probTitle">$($E.Name)</p>
                                    <p>$($E.Description)</p>
                                    $htmlValue
                                </td>
                            </tr>
"@
                        }

                        $SettingsDetailWarning = foreach ($E in @($S.Check).Where( { $_.Type -eq 'Warning' })) {
                            $htmlValue = ConvertTo-HtmlValueHC
                            @"
                            <tr>
                                <td id="probTypeWarning"></td>
                                <td colspan="7">
                                    <p id="probTitle">$($E.Name)</p>
                                    <p>$($E.Description)</p>
                                    $htmlValue
                                </td>
                            </tr>
"@
                        }

                        $SettingsDetailInfo = foreach ($E in @($S.Check).Where( { $_.Type -eq 'Information' })) {
                            $htmlValue = ConvertTo-HtmlValueHC
                            @"
                            <tr>
                                <td id="probTypeInfo"></td>
                                <td colspan="7">
                                    <p id="probTitle">$($E.Name)</p>
                                    <p>$($E.Description)</p>
                                    $htmlValue
                                </td>
                            </tr>
"@
                        }
                        #endregion

                        #region HTML Settings Create file
                        $SettingsDetail = @"
                            <!DOCTYPE html>
                            <html>
                            <head>
                                <style type="text/css">
                                    body {
                                        font-family: verdana;
                                        background-color: white;
                                    }

                                    h1 {
                                        background-color: black;
                                        color: white;
                                        margin-bottom: 10px;
                                        text-indent: 10px;
                                        page-break-before: always;
                                    }

                                    h2 {
                                        background-color: lightGrey;
                                        margin-bottom: 10px;
                                        text-indent: 10px;
                                        page-break-before: always;
                                    }

                                    h3 {
                                        background-color: lightGrey;
                                        margin-bottom: 10px;
                                        font-size: 16px;
                                        text-indent: 10px;
                                        page-break-before: always;
                                    }

                                    p {
                                        font-size: 14px;
                                        margin-left: 10px;
                                    }

                                    p.italic {
                                        font-style: italic;
                                        font-size: 12px;
                                    }

                                    table {
                                        font-size: 14px;
                                        border-collapse: collapse;
                                        border: 1px none;
                                        padding: 3px;
                                        text-align: left;
                                        padding-right: 10px;
                                        margin-left: 10px;
                                    }

                                    td,
                                    th {
                                        font-size: 14px;
                                        border-collapse: collapse;
                                        border: 1px none;
                                        padding: 3px;
                                        text-align: left;
                                        padding-right: 10px
                                    }

                                    li {
                                        font-size: 14px;
                                    }

                                    base {
                                        target="_blank"
                                    }
                                </style>
                            </head>

                            <body>
                                $htmlStyle
                                <table id="matrixTable">
                                <tr>
                                    <th id="matrixTitle" colspan="8"><a href="$($I.File.SaveFullName)">$($I.File.Item.Name)</a></th>
                                </tr>
                                $HtmlSettingsHeader
                                <tr>
                                    <td id="$ProbType"></td>
                                    <td>$($S.ID)</td>
                                    <td>$($S.Import.ComputerName)</td>
                                    <td>$($S.Import.Path)</td>
                                    <td>$($S.Import.Action)</td>
                                    <td>$(if($D = $S.JobTime.Duration){ '{0:00}:{1:00}:{2:00}' -f $D.Hours, $D.Minutes, $D.Seconds}else{'NA'})</td>
                                </tr>

                                $(if ($SettingsDetailFatalError) {'<th id="matrixHeader" colspan="8">Error</th>' + $SettingsDetailFatalError})
                                $(if ($SettingsDetailWarning) {'<th id="matrixHeader" colspan="8">Warning</th>' + $SettingsDetailWarning})
                                $(if ($SettingsDetailInfo) {'<th id="matrixHeader" colspan="8">Information</th>' + $SettingsDetailInfo})

                                </table>
                                <br>
                                $htmlLegend
                                    <h2>About</h2>
                                <table>
                                    <tr>
                                        <th>GroupName</th>
                                        <td>$($S.Import.GroupName)</td>
                                    </tr>
                                    <tr>
                                        <th>SiteCode</th>
                                        <td>$($S.Import.SiteCode)</td>
                                    </tr>
                                    <tr>
                                        <th>Start time</th>
                                        <td>$(
                                            if ($D = $S.JobTime.Start) {
                                                $D.ToString('dd/MM/yyyy HH:mm:ss (dddd)')
                                            }
                                            else {
                                                'NA'
                                            }
                                            )
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>End time</th>
                                        <td>$(
                                            if ($D = $S.JobTime.End) {
                                                $D.ToString('dd/MM/yyyy HH:mm:ss (dddd)')
                                            }
                                            else {
                                                'NA'
                                            }
                                            )
                                        </td>
                                    </tr>
                                </table>
                            </body>
                        </html>
"@

                        $SettingsFile = Join-Path -Path  $I.File.LogFolder -ChildPath "ID $($S.ID) - Settings.html"
                        $SettingsDetail | Out-File -FilePath $SettingsFile -Encoding utf8
                        #endregion

                        $MailSettingsTable += @"
                        <tr>
                            <td id="$ProbType"></td>
                            <td><a href="$SettingsFile">$($S.ID)</a></td>
                            <td><a href="$SettingsFile">$($S.Import.ComputerName)</a></td>
                            <td><a href="$SettingsFile">$($S.Import.Path)</a></td>
                            <td><a href="$SettingsFile">$($S.Import.Action)</a></td>
                            <td><a href="$SettingsFile">$(if($D = $S.JobTime.Duration){ '{0:00}:{1:00}:{2:00}' -f $D.Hours, $D.Minutes, $D.Seconds}else{'NA'})</a></td>
                        </tr>
"@
                    }
                }
                #endregion

                @"
                <table id="matrixTable">
                    <tr>
                        <th id="matrixTitle" colspan="8"><a href="$($I.File.SaveFullName)">$($I.File.Item.Name)</a></th>
                    </tr>
                    <tr>
                        <th id="matrixFileInfo" colspan="8">Last change: $($I.File.ExcelInfo.LastModifiedBy) @ $($I.File.ExcelInfo.Modified.ToString('dd/MM/yyyy HH:mm:ss'))</th>
                    </tr>
                    $FileCheck
                    $FormDataCheck
                    $PermissionsCheck
                    $MailSettingsTable
                </table>
                <br><br>
"@
            }

            #region FatalError and warning count
            $count = @{
                FormData    = @{
                    Error   = @(
                        $ImportedMatrix.FormData.Check | 
                        Where-Object Type -EQ 'FatalError'
                    ).count
                    Warning = @(
                        $ImportedMatrix.FormData.Check | 
                        Where-Object Type -EQ 'Warning'
                    ).count
                }
                Permissions = @{
                    Error   = @(
                        $ImportedMatrix.Permissions.Check | 
                        Where-Object Type -EQ 'FatalError'
                    ).count
                    Warning = @(
                        $ImportedMatrix.Permissions.Check | 
                        Where-Object Type -EQ 'Warning'
                    ).count
                }
                Settings    = @{
                    Error   = @(
                        $ImportedMatrix.Settings.Check | 
                        Where-Object Type -EQ 'FatalError'
                    ).count
                    Warning = @(
                        $ImportedMatrix.Settings.Check | 
                        Where-Object Type -EQ 'Warning'
                    ).count
                }
                File        = @{
                    Error   = @(
                        $ImportedMatrix.File.Check | 
                        Where-Object Type -EQ 'FatalError'
                    ).count
                    Warning = @(
                        $ImportedMatrix.File.Check | 
                        Where-Object Type -EQ 'Warning'
                    ).count
                }
            }
            
            #endregion

            $htmlFormData = if ($CherwellFolder) {
                @"
            <p><b>Export to <a href="$CherwellFolder">Cherwell</a>:</b></p>
            <table id="overviewTable">
            <tr>
                <th>
                $(
                    if ($adObjectNamesSheet.count -and 
                        $exportCsvAdParams.literalPath -and
                        (Test-Path -LiteralPath $exportCsvAdParams.literalPath)
                    ) {
@"
                        <a href="$($exportCsvAdParams.literalPath)">AD objects</a>
"@
                    }
                    else {'AD objects'}
                )
                </th>
                <td>$($adObjectNamesSheet.count)</td>
            </tr>
            <tr>
                <th>
            $(
                if ($formDataSheet.count -and 
                    $exportCsvFormParams.literalPath -and
                    (Test-Path -LiteralPath $exportCsvFormParams.literalPath)
                ) {
@"
                    <a href="$($exportCsvFormParams.literalPath)">Form data</a>
"@
                }
                else {'From data'}
            )
                </th>
                <td>$($formDataSheet.count)</td>
            </tr>
            </table>
            $(
                if (
                    ($ExportParams.Path) -and 
                    (Test-Path -LiteralPath $ExportParams.Path)
                ) { 
@"
<p><i>* Check the <a href="$($ExportParams.Path)">overview</a> for details.</i></p>
"@
                }
            )
            <hr style="width:50%;text-align:left;margin-left:0">
"@
            }

            $errorCount = (
                $count.FormData.error + $count.Permissions.error + 
                $count.Settings.error + $count.File.error
            )
            $warningCount = (
                $count.FormData.warning + $count.Permissions.warning + 
                $count.Settings.warning + $count.File.warning
            )

            $htmlErrorWarningTable = if ($errorCount + $warningCount) {
                @"
            <p><b>Detected issues:</b></p>
            <table id="overviewTable">
            <tr>
                <td></td>
                <td>Errors</td>
                <td>Warnings</td>
            </tr>
            $(
                foreach ($item in ($count.GetEnumerator())) {
                    if ($item.Value.Error + $item.Value.warning) {
@"
                    <tr>
                        <th>$($item.Key)</th>
                        <td{0}>$($item.Value.Error)</td>
                        <td{1}>$($item.Value.Warning)</td>
                    </tr>
"@ -f $(if ($item.Value.Error) {' id="probTextError"'}),
$(if ($item.Value.Warning) {' id="probTextWarning"'})
                    }
                }
            )
            </table>
            <p><i>* Check the matrix results below for details.</i></p>
            <hr style="width:50%;text-align:left;margin-left:0">
"@
            }

            $htmlMail = @"
                $htmlStyle
                $htmlErrorWarningTable
                $htmlFormData
                <p><b>Matrix results per file:</b></p>
                $htmlMatrixTables
                $htmlLegend
"@

            $Subject = "$(@($ImportedMatrix).Count) matrix file{0}{1}{2}" -f $(
                if (@($ImportedMatrix).Count -ne 1) { 's' }
            ),
            $(
                if ($errorCount) {
                    ", $errorCount error{0}" -f $(
                        if ($errorCount -ne 1) { 's' }
                    )
                }
            ),
            $(
                if ($warningCount) {
                    ", $warningCount warning{0}" -f $(
                        if ($warningCount -ne 1) { 's' }
                    )
                }
            )

            $MailParams = @{
                To        = $MailTo
                Bcc       = $ScriptAdmin
                Priority  = if ($errorCount + $warningCount) { 'High' }
                else { 'Normal' }
                Subject   = $Subject
                Message   = $htmlMail
                Save      = "$matrixLogFile - Mail - $Subject.html"
                Header    = $ScriptName
                LogFolder = $LogFolder
            }
            Get-ScriptRuntimeHC -Stop
            Send-MailHC @MailParams
            #endregion

            #region Non terminating errors are reported to the admin
            # usually when Get-ADObjectDetailHC times out for groups too large
            if ($error) {
                $MailParams = @{
                    To        = $ScriptAdmin
                    Priority  = 'High'
                    Subject   = "FAILURE - $($error.count) non terminating errors"
                    Message   = "While running the permission matrix the following non terminating errors where reported: $($error.Exception.Message | Where-Object { $_  } | ConvertTo-HtmlListHC -Spacing Wide )"
                    Save      = "$matrixLogFile - Mail - $($error.count) non terminating errors.html"
                    Header    = $ScriptName
                    LogFolder = $LogFolder
                }
                Send-MailHC @MailParams
            }
            #endregion
        }
    }
    Catch {
        Write-Warning $_
        Send-MailHC -To $ScriptAdmin -Subject FAILURE -Priority High -Message $_ -Header $ScriptName
        Write-EventLog @EventErrorParams -Message "FAILURE:`n`n- $_"; Exit 1
    }
    Finally {
        Get-Job | Remove-Job -Force
        Get-PSSession | Remove-PSSession
        Remove-PSDrive ImportDir -EA Ignore
        Write-EventLog @EventEndParams
    }
}